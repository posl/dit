[duration]
10
[font_size]
20
[notes]
### 1

2：　ポインタを表示
1：　ポインタを消す
### 4

仮想化技術としてのメリットもある．
### 5

「commitについて」

コンテナからイメージを生成することもできますが，
保守性・可視性・可搬性などの観点からDockerfileを
使ったイメージ構築のやり方の方が推奨されています．
### 7

「２」
例えば，イメージサイズの削減という課題に対しては，

Dockerfileの機能を拡充する形で
マルチステージビルドという機能が追加されたり，

外部ツールとして，DockerSlimのような
イメージ変換ツールが提案されたりしています．


「３」
このように，様々な課題解決の手法が提案されているのですが，
下の３つの課題には，まだ解決手法がありません．

そこで，本ツールで，下２つの課題を解決したいと考えています．
具体的な解決手法は，次の通りです．
### 9

「前半」
先ほどの話の続きになるのですが，
なぜイメージ開発の効率化が必要かというと，


「後半」
動作確認の手法として，

〜

が考えられますが，そのどちらにも問題があります．
### 10

言葉だけだと，伝わりにくかったかもしれないので，
次の動画をご覧ください．

まずは，１つ目の動作確認の手法を用いた開発例です．

動画：　秒


見た感じで分かったかもしれませんが，
この動作確認の手法には，次のような問題があります．

・単純に手間が多い
・シェルとDockerfileの両方を考える必要がある
### 11

続いて，２つ目の動作確認の手法を用いた開発例です．

動画：　秒


この手法にも次のような問題があります．

・後からミスが発覚した時の時間ロスが大きい
### 12

本ツールを用いると，次のように
効率的にDockerfileを作成することができます．

動画：　秒
### 13

まとめると，本ツールの特長の１つとして，

〜

というメリットがあります．


このインタラクティブツールとしての側面が，
「イメージ開発の効率化」という課題を解決しています．
### 14

「１」
ですが，これだけでは優れたDockerfileにはなりません．

前述の方法で自動生成したDockerfileの例がこれなんですが，
見てもらったらわかる通り，


「２」
まず，見づらいです．


「３」
また，細かい改善すべき点がいくつもあります．
### 15

本ツールを用いると，次のように，
Dockerfileのリファクタリングと最適化も行えます．
### 16

まとめると，本ツールのもう１つの特徴として，

〜

というメリットがあります．


このリファクタリングツールとしての側面が，
「Dockerfileの保守性の確保」という課題を解決しています．
### 25

g：　ページ指定ジャンプ
Tab：　サムネイル表示
