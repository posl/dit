[duration]
10
[font_size]
20
[notes]
### 1

ポインタ
　2：　オン
　1：　オフ


動画
　h：　画面を隠す
　フルスクリーン：　cmd + shift + F
　再生・停止：　space
### 4

仮想化技術としてのメリットもある．
### 5

「commitについて」

コンテナからイメージを生成することもできますが，
保守性・可視性・可搬性などの観点からDockerfileを
使ったイメージ構築のやり方の方が推奨されています．
### 7

「２」
例えば，イメージサイズの削減という課題に対しては，

Dockerfileの機能を拡充する形で
マルチステージビルドという機能が追加されたり，

外部ツールとして，DockerSlimのような
イメージ変換ツールが提案されたりしています．


「３」
このように，様々な課題解決の手法が提案されているのですが，
下の３つの課題には，まだ解決手法がありません．

そこで，本ツールで，下２つの課題を解決したいと考えています．
具体的な解決手法は，次の通りです．
### 9

「前半」
先ほどの話の続きになるのですが，
なぜイメージ開発の効率化が必要かというと，


「後半」
考えられる動作確認の手法として，次の２つ
　〜　がありますが，そのどちらにも問題があります．
### 10

言葉だけだと，伝わりにくかったかもしれないので，
次の動画をご覧ください．

まずは，１つ目の動作確認の手法を用いた開発例です．

動画：　５５秒
テーマ：　Debianにsu-execをインストールしたい．


さっきのは，ほとんどタイムアタックをしていたので，
問題点がわかりにくかったかもしれませんが，
動画を作るのが大変だったと言ってたように，

シェルとDockerfileの両方を考える必要があるため，
　〜　という問題があります．
### 11

続いて，２つ目の動作確認の手法を用いた開発例です．

さっきの続きみたいになってます．

動画：　１分０３秒
テーマ：　コンテナ起動時にsu-execでユーザを切り替えたい．


この例の問題点はわかりやすかったと思うんですが，
特に後からミスが発覚した場合などで
　〜　という問題があります．
### 12

最後に，本ツールを用いた時の開発例です．

本ツールを用いると，先述の問題を克服して，
次のように，効率的にDockerfileを作成することができます．

動画：　秒
テーマ：　さっきと一緒です．
### 13

まとめると，本ツールの特長の１つとして，
　〜　というものがあります．


このインタラクティブツールとしての側面が，
「イメージ開発の効率化」という課題を解決しています．
### 14

「１」
ですが，これだけでは優れたDockerfileにはなりません．

前述の方法で自動生成したDockerfileの例がこれなんですが，
見てもらったらわかる通り，


「２」
まず，見づらいです．


「３」
また，細かい改善すべき点がいくつもあります．
### 15

本ツールを用いると，次のように，
Dockerfileのリファクタリングと最適化を行うことができ，
実践的に使えるDockerfileを生成することができます．
### 16

まとめると，本ツールのもう１つの特徴として，
　〜　というものがあります．


このリファクタリングツールとしての側面が，
「Dockerfileの保守性の確保」という課題を解決しています．
### 18

＊＊　急いでたら読む．　＊＊


ツールの利用方法は簡単で，
まず本ツールのリポジトリをクローンして，

（シャロークローンで大丈夫）
### 19

＊＊　急いでたら読む．　＊＊


開発用のディレクトリを用意し，
コンテナ内にコピーしたいファイルがあれば，ここに入れます．
### 20

＊＊　急いでたら読む．　＊＊


そして，exec.shというスクリプトがあるので，
それを実行して，開発用のコンテナにbashで入り，
### 21

＊＊　急いでたら読む．　＊＊


後は，お好みの環境構築をするだけで，
自動的にDockerfileが作られていきます．


ただし，
　パッケージのインストールは dit install，
　ホスト環境からのファイルのコピーは dit copy
という，本ツールのコマンドを使用する必要があります．
### 22

＊＊　急いでたら読む．　＊＊


最後に，dit optimize コマンドで
Dockerfileのリファクタリング・最適化を行うと，
Dockerfileが完成します．
### 25

g：　ページ指定ジャンプ
Tab：　サムネイル表示
